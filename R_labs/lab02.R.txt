# Lab 2 Libraries

# install.packages("MASS")
# install.packages("ISLR")

library(MASS)
library(ISLR)

# Simple Linear Regression

View(Boston)
names(Boston)
?Boston
lm.fit = lm(medv ~ lstat)
lm.fit = lm(medv ~ lstat, data = Boston)
attach(Boston)
lm.fit = lm(medv ~ lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
lm.fit$coefficients
coef(lm.fit)
# Confidenc interval for the coefficient estimates
confint(lm.fit)

# Preditive values, confidence intervals and prediction intervals for the prediction of medv for a given value of lstat
predict(lm.fit, data.frame(lstat = (c(5, 10, 15))))
predict(lm.fit, data.frame(lstat = (c(5, 10, 15))), interval = "confidence")
predict(lm.fit, data.frame(lstat = (c(5, 10, 15))), interval = "prediction")
# CI(y_hat) = CI(beta0_hat + x * beta1_hat)
# PI(y_hat) = CI(beta0_hat + x * beta1_hat + e)

plot(lstat, medv)
abline(lm.fit)
abline(lm.fit, lwd = 3)
abline(lm.fit, lwd = 3, col = "red")
plot(lstat, medv, col = "red")
plot(lstat, medv, pch = 20)
plot(lstat, medv, pch = "+")
par(mfrow = c(2, 2))
plot(lm.fit)

# Diagnostic - "NICE": normality, independent, constant variance, E{e} = 0
par(mfrow = c(1, 1))
# plot of fitted values vs (standardized) residuals
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
# plot of leverage statistics
plot(hatvalues(lm.fit))
which.max(hatvalues(lm.fit))

# Multiple Linear Regression
lm.fit1 = lm(medv ~ lstat + age, data = Boston)
summary(lm.fit1)
lm.fit2 = lm(medv ~ ., data = Boston)
summary(lm.fit2)
lm.fit3 = lm(medv ~ . - age, data = Boston)
summary(lm.fit3)
lm.fit4 <- lm(medv ~ lstat + age + tax + rad, data = Boston)
summary(lm.fit4)
anova(lm.fit1, lm.fit4)  ## F test, anova() function performs a hypothesis test comparing the two models

# Interaction Terms
summary(lm(medv ~ . - age + ptratio*tax, data = Boston))
summary(lm(medv ~ . - age - ptratio - tax + ptratio*tax, data = Boston)) # ptratio and tax are not excluded
summary(lm(medv ~ . - age - ptratio - tax + ptratio:tax, data = Boston)) # ptratio and tax are excluded

# Transformations
summary(lm(medv ~ . - age + rm ^ 2,    data = Boston)) # square transformation of rm is not recognized
summary(lm(medv ~ . - age + I(rm ^ 2), data = Boston)) # you need I() to isolate the transformation. In other words, I() can inhibit the interpretation of operators such as "+", "-", "*" and "^" as formula operators, so they are used as arithmetical operators.
summary(lm(medv ~ . - age + log(rm), data = Boston)) # it is OK to do log transformation without I()

# Categorical Predictors
View(Carseats)
?Carseats
names(Carseats)
# Predict sales (child car seat sales) in 400 locations on a number of predictors
lm.fit = lm(Sales ~ . + Income:Advertising + Price:Age, data = Carseats)
summary(lm.fit)
attach(Carseats)
# ShelveLoc: an indicator of the quality of the shelving location, i.e. the space within a store in which the car seat is displayed at each location
contrasts(ShelveLoc)
contrasts(Urban)

# Lab 2 Writing Functions
f1
f1()
f1 = function(x){
  d = median(x) - mean(x)
  return(d)
}
f1(x = c(1,2,6))

LoadLibraries
LoadLibraries()
LoadLibraries = function() {
  library(ISLR)
  library(MASS)
  print("The libraries have been loaded.")
}
LoadLibraries
LoadLibraries()